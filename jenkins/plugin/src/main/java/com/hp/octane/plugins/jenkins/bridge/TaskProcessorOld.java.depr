package com.hp.octane.plugins.jenkins.bridge;

import com.hp.mqm.client.MqmRestClient;
import com.hp.nga.integrations.bridge.TaskRouter;
import com.hp.nga.integrations.dto.rest.AbridgedResult;
import com.hp.nga.integrations.dto.rest.AbridgedTask;
import com.hp.octane.plugins.jenkins.actions.PluginActions;
import com.hp.octane.plugins.jenkins.client.JenkinsMqmRestClientFactory;
import com.hp.octane.plugins.jenkins.configuration.ServerConfiguration;
import net.sf.json.JSONObject;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

/**
 * Created by gullery on 17/08/2015.
 * <p/>
 * This class is a Tasks Processor for abridged connectivity and to be run in separate thread
 */

public class TaskProcessorOld implements Runnable {
	private static final Logger logger = Logger.getLogger(TaskProcessorOld.class.getName());
	private final JSONObject task;
	private final JenkinsMqmRestClientFactory clientFactory;
	private final ServerConfiguration mqmConfiguration;

	TaskProcessorOld(JSONObject task, JenkinsMqmRestClientFactory clientFactory, ServerConfiguration mqmConfiguration) {
		this.task = task;
		this.clientFactory = clientFactory;
		this.mqmConfiguration = mqmConfiguration;
	}

	@Override
	public void run() {
		String id = task.getString("id");
		String method = task.getString("method");
		String url = task.getString("url");
		Map<String, String> headers = task.containsKey("headers") ? buildHeadersMap(task.getJSONObject("headers")) : null;
		String body = obtainBody();
		logger.info("BRIDGE: processing task '" + id + "': " + method + " " + url);

		AbridgedTask abridgedTask = new AbridgedTask();
		abridgedTask.setId(id);
		abridgedTask.setMethod(method);
		abridgedTask.setUrl(url);
		abridgedTask.setHeaders(headers);
		abridgedTask.setBody(body);
		TaskRouter tmpNonLoopbackRouter = new TaskRouter(abridgedTask);
		AbridgedResult abridgedResult = tmpNonLoopbackRouter.calculateResult();

		MqmRestClient restClient = clientFactory.create(
				mqmConfiguration.location,
				mqmConfiguration.sharedSpace,
				mqmConfiguration.username,
				mqmConfiguration.password);
		JSONObject json = new JSONObject();
		json.put("statusCode", abridgedResult.getStatus());
		json.put("headers", abridgedResult.getHeaders());
		json.put("body", abridgedResult.getBody());

		int submitStatus = restClient.putAbridgedResult(
				new PluginActions.ServerInfo().getInstanceId(),
				id,
				json.toString());
		logger.info("BRIDGE: result for task '" + id + "' submitted with status " + submitStatus);
	}

	private Map<String, String> buildHeadersMap(JSONObject json) {
		Map<String, String> result = new HashMap<String, String>();
		for (Object key : json.keySet()) result.put((String) key, json.getString((String) key));
		return result;
	}

	private String obtainBody() {
		String result;
		if (task.containsKey("body") && task.get("body") != null) {
			result = task.getString("body");
		} else {
			result = "";
		}
		return result;
	}
}
